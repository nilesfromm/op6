{"ast":null,"code":"import{OrbitControls}from\"@react-three/drei\";import{Canvas,useFrame}from\"@react-three/fiber\";import{useMemo,useRef}from\"react\";import{MathUtils}from\"three\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const vert=\"\\nprecision mediump float;\\nprecision mediump int;\\n\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nvarying vec3 vNormal;\\nuniform float time;\\n\\n//new code\\nfloat pi = 3.14159265358979323846;\\nvec3 orthogonal(vec3 v) {\\n  return normalize(abs(v.x) > abs(v.z) ? vec3(-v.y, v.x, 0.0): vec3(0.0, -v.z, v.y));\\n}\\nvarying float intensity;\\nuniform float u_time, u_scale;\\nuniform float x_freq, y_freq, z_freq, w_freq;\\nuniform float x_amp, y_amp, z_amp, w_amp;\\nvec3 displace(vec3 point) {\\n  return vec3(0., (x_amp * sin(-u_time + u_scale * x_freq *( point.z/(2.*pi))))+(y_amp * sin(u_time + u_scale * y_freq*( point.x/(2.*pi)))), (z_amp * sin(u_time + u_scale * z_freq*( point.y/(2.*pi))))+(w_amp * sin(u_time + u_scale * w_freq*( point.x/(2.*pi)))));\\n}\\n\\nvoid main() {\\n    \\n    vec3 displacedPosition = position + displace(position);\\n    float offset = 0.0140625;\\n\\n    vec3 tangent = orthogonal(normal);\\n    vec3 bitangent = normalize(cross(normal, tangent));\\n    vec3 neighbour1 = position + tangent * offset; //transformed was position???\\n    vec3 neighbour2 = position + bitangent * offset;\\n    vec3 displacedNeighbour1 = neighbour1 + displace(neighbour1);\\n    vec3 displacedNeighbour2 = neighbour2 + displace(neighbour2);\\n    \\n    vec3 displacedTangent = displacedNeighbour1 - displacedPosition;\\n    vec3 displacedBitangent = displacedNeighbour2 - displacedPosition;\\n\\n    vec3 displacedNormal = normalize(cross(displacedTangent, displacedBitangent));\\n\\n    vec3 transformed = displacedPosition;\\n    vNormal = normalize(normalMatrix * displacedNormal);\\n    intensity = pow(1.0 - abs(dot(normalize(normalMatrix * displacedNormal), vec3(0, 0, 1))), 1.);\\n    vec3 pos = transformed;\\n\\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.0);\\n}\\n\";const frag=\"\\nprecision mediump float;\\nvarying vec3 vpos;\\nvarying float intensity;\\nvec3 cosPalette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\\n    return a + b * cos(6.28318 * (c * t + d));\\n}\\nuniform vec3 glowColor;\\n\\nvoid main() {\\n    vec3 brightness = vec3(0.5, 0.5, 0.5);\\n    vec3 contrast = vec3(0.5, 0.5, 0.5);\\n    vec3 oscilation = vec3(1.0, 1.0, 1.0);\\n    vec3 phase = vec3(0.2, 0.1, 0.0);\\n    vec3 color = cosPalette(intensity, brightness, contrast, oscilation, phase);\\n    vec3 glow = vec3(0.25,1.0,1.0) * intensity;\\n    vec4 diffuseColor = vec4(color, 1.0);\\n    \\n    gl_FragColor = vec4(color, 1.0);\\n}\\n\";const Model=_ref=>{let{amps,frqs}=_ref;// This reference will give us direct access to the mesh\nconst mesh=useRef();const hover=useRef(false);const uniforms=useMemo(()=>({u_scale:{value:1.0},u_time:{value:0.0},x_freq:{value:0.0},y_freq:{value:0.0},z_freq:{value:0.0},w_freq:{value:0.0},x_amp:{value:0.0},y_amp:{value:0.0},z_amp:{value:0.0},w_amp:{value:0.0}}),[]);useFrame(state=>{const{clock}=state;mesh.current.material.uniforms.u_time.value=0.4*clock.getElapsedTime();mesh.current.material.uniforms.x_freq.value=5+frqs[0]/10;mesh.current.material.uniforms.y_freq.value=5+frqs[1]/10;mesh.current.material.uniforms.z_freq.value=5+frqs[2]/10;mesh.current.material.uniforms.w_freq.value=5+frqs[3]/10;console.log(frqs);mesh.current.material.uniforms.x_amp.value=amps[0]/2;mesh.current.material.uniforms.y_amp.value=amps[1]/2;mesh.current.material.uniforms.z_amp.value=amps[2]/2;mesh.current.material.uniforms.w_amp.value=amps[3]/2;});return/*#__PURE__*/_jsxs(\"mesh\",{ref:mesh,position:[0,0,0],scale:1.5,onPointerOver:()=>hover.current=true,onPointerOut:()=>hover.current=false,children:[/*#__PURE__*/_jsx(\"icosahedronGeometry\",{args:[0.75,60]}),/*#__PURE__*/_jsx(\"shaderMaterial\",{fragmentShader:frag,vertexShader:vert,uniforms:uniforms,wireframe:false})]});};export default Model;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}