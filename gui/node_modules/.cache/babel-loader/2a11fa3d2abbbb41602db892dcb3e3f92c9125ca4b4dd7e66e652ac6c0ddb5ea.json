{"ast":null,"code":"var _jsxFileName = \"/Users/niles/Desktop/Github/cmaj/firstProj/gui/src/3D/Sphere.js\",\n  _s = $RefreshSig$();\nimport { OrbitControls } from \"@react-three/drei\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { useMemo, useRef } from \"react\";\nimport { MathUtils } from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vert = `\nprecision mediump float;\nprecision mediump int;\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nuniform float time;\n\n//new code\nfloat pi = 3.14159265358979323846;\nvec3 orthogonal(vec3 v) {\n  return normalize(abs(v.x) > abs(v.z) ? vec3(-v.y, v.x, 0.0): vec3(0.0, -v.z, v.y));\n}\nvarying float intensity;\nuniform float u_time, u_scale;\nuniform float x_freq, y_freq, z_freq, w_freq;\nuniform float x_amp, y_amp, z_amp, w_amp;\nvec3 displace(vec3 point) {\n  return vec3(0., (0.5 * sin(-u_time + 1. * 20.*( point.z/(2.*pi))))+(y_amp * sin(u_time + u_scale * y_freq*( point.x/(2.*pi)))), (z_amp * sin(u_time + u_scale * z_freq*( point.y/(2.*pi))))+(w_amp * sin(u_time + u_scale * w_freq*( point.x/(2.*pi)))));\n}\n\nvoid main() {\n    \n    vec3 displacedPosition = position + displace(position);\n    float offset = 0.0140625;\n\n    vec3 tangent = orthogonal(normal);\n    vec3 bitangent = normalize(cross(normal, tangent));\n    vec3 neighbour1 = position + tangent * offset; //transformed was position???\n    vec3 neighbour2 = position + bitangent * offset;\n    vec3 displacedNeighbour1 = neighbour1 + displace(neighbour1);\n    vec3 displacedNeighbour2 = neighbour2 + displace(neighbour2);\n    \n    vec3 displacedTangent = displacedNeighbour1 - displacedPosition;\n    vec3 displacedBitangent = displacedNeighbour2 - displacedPosition;\n\n    vec3 displacedNormal = normalize(cross(displacedTangent, displacedBitangent));\n\n    vec3 transformed = displacedPosition;\n    vNormal = normalize(normalMatrix * displacedNormal);\n    intensity = pow(1.0 - abs(dot(normalize(normalMatrix * displacedNormal), vec3(0, 0, 1))), 1.);\n    vec3 pos = transformed;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.0);\n}\n`;\nconst frag = `\nprecision mediump float;\nvarying vec3 vpos;\nvarying float intensity;\nvec3 cosPalette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b * cos(6.28318 * (c * t + d));\n}\nuniform vec3 glowColor;\n\nvoid main() {\n    vec3 brightness = vec3(0.5, 0.5, 0.5);\n    vec3 contrast = vec3(0.5, 0.5, 0.5);\n    vec3 oscilation = vec3(1.0, 1.0, 1.0);\n    vec3 phase = vec3(0.2, 0.1, 0.0);\n    vec3 color = cosPalette(intensity, brightness, contrast, oscilation, phase);\n    vec3 glow = vec3(0.25,1.0,1.0) * intensity;\n    vec4 diffuseColor = vec4(color, 1.0);\n    \n    gl_FragColor = vec4(color, 1.0);\n}\n`;\nconst Model = () => {\n  _s();\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n  const hover = useRef(false);\n  const uniforms = useMemo(() => ({\n    u_scale: {\n      value: 1.0\n    },\n    u_time: {\n      value: 0.0\n    }\n  }), []);\n  useFrame(state => {\n    const {\n      clock\n    } = state;\n    mesh.current.material.uniforms.u_time.value = 0.4 * clock.getElapsedTime();\n    mesh.current.material.uniforms.u_intensity.value = MathUtils.lerp(mesh.current.material.uniforms.u_intensity.value, hover.current ? 0.85 : 0.15, 0.02);\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: mesh,\n    position: [0, 0, 0],\n    scale: 1.5,\n    onPointerOver: () => hover.current = true,\n    onPointerOut: () => hover.current = false,\n    children: [/*#__PURE__*/_jsxDEV(\"icosahedronGeometry\", {\n      args: [1, 24]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"shaderMaterial\", {\n      fragmentShader: frag,\n      vertexShader: vert,\n      uniforms: uniforms,\n      wireframe: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s(Model, \"MXLDZE1C+dDojK1hwP1kaSSOz3U=\", false, function () {\n  return [useFrame];\n});\n_c = Model;\nexport default Model;\nvar _c;\n$RefreshReg$(_c, \"Model\");","map":{"version":3,"names":["OrbitControls","Canvas","useFrame","useMemo","useRef","MathUtils","jsxDEV","_jsxDEV","vert","frag","Model","_s","mesh","hover","uniforms","u_scale","value","u_time","state","clock","current","material","getElapsedTime","u_intensity","lerp","ref","position","scale","onPointerOver","onPointerOut","children","args","fileName","_jsxFileName","lineNumber","columnNumber","fragmentShader","vertexShader","wireframe","_c","$RefreshReg$"],"sources":["/Users/niles/Desktop/Github/cmaj/firstProj/gui/src/3D/Sphere.js"],"sourcesContent":["import { OrbitControls } from \"@react-three/drei\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { useMemo, useRef } from \"react\";\nimport { MathUtils } from \"three\";\n\nconst vert = `\nprecision mediump float;\nprecision mediump int;\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nuniform float time;\n\n//new code\nfloat pi = 3.14159265358979323846;\nvec3 orthogonal(vec3 v) {\n  return normalize(abs(v.x) > abs(v.z) ? vec3(-v.y, v.x, 0.0): vec3(0.0, -v.z, v.y));\n}\nvarying float intensity;\nuniform float u_time, u_scale;\nuniform float x_freq, y_freq, z_freq, w_freq;\nuniform float x_amp, y_amp, z_amp, w_amp;\nvec3 displace(vec3 point) {\n  return vec3(0., (0.5 * sin(-u_time + 1. * 20.*( point.z/(2.*pi))))+(y_amp * sin(u_time + u_scale * y_freq*( point.x/(2.*pi)))), (z_amp * sin(u_time + u_scale * z_freq*( point.y/(2.*pi))))+(w_amp * sin(u_time + u_scale * w_freq*( point.x/(2.*pi)))));\n}\n\nvoid main() {\n    \n    vec3 displacedPosition = position + displace(position);\n    float offset = 0.0140625;\n\n    vec3 tangent = orthogonal(normal);\n    vec3 bitangent = normalize(cross(normal, tangent));\n    vec3 neighbour1 = position + tangent * offset; //transformed was position???\n    vec3 neighbour2 = position + bitangent * offset;\n    vec3 displacedNeighbour1 = neighbour1 + displace(neighbour1);\n    vec3 displacedNeighbour2 = neighbour2 + displace(neighbour2);\n    \n    vec3 displacedTangent = displacedNeighbour1 - displacedPosition;\n    vec3 displacedBitangent = displacedNeighbour2 - displacedPosition;\n\n    vec3 displacedNormal = normalize(cross(displacedTangent, displacedBitangent));\n\n    vec3 transformed = displacedPosition;\n    vNormal = normalize(normalMatrix * displacedNormal);\n    intensity = pow(1.0 - abs(dot(normalize(normalMatrix * displacedNormal), vec3(0, 0, 1))), 1.);\n    vec3 pos = transformed;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.0);\n}\n`\n\nconst frag = `\nprecision mediump float;\nvarying vec3 vpos;\nvarying float intensity;\nvec3 cosPalette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b * cos(6.28318 * (c * t + d));\n}\nuniform vec3 glowColor;\n\nvoid main() {\n    vec3 brightness = vec3(0.5, 0.5, 0.5);\n    vec3 contrast = vec3(0.5, 0.5, 0.5);\n    vec3 oscilation = vec3(1.0, 1.0, 1.0);\n    vec3 phase = vec3(0.2, 0.1, 0.0);\n    vec3 color = cosPalette(intensity, brightness, contrast, oscilation, phase);\n    vec3 glow = vec3(0.25,1.0,1.0) * intensity;\n    vec4 diffuseColor = vec4(color, 1.0);\n    \n    gl_FragColor = vec4(color, 1.0);\n}\n`\n\nconst Model = () => {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n  const hover = useRef(false);\n\n  const uniforms = useMemo(\n    () => ({\n      u_scale: {\n        value: 1.0,\n      },\n      u_time: {\n        value: 0.0,\n      },\n    }),\n    []\n  );\n\n  useFrame((state) => {\n    const { clock } = state;\n    mesh.current.material.uniforms.u_time.value = 0.4 * clock.getElapsedTime();\n\n    mesh.current.material.uniforms.u_intensity.value = MathUtils.lerp(\n      mesh.current.material.uniforms.u_intensity.value,\n      hover.current ? 0.85 : 0.15,\n      0.02\n    );\n  });\n\n  return (\n    <mesh\n      ref={mesh}\n      position={[0, 0, 0]}\n      scale={1.5}\n      onPointerOver={() => (hover.current = true)}\n      onPointerOut={() => (hover.current = false)}\n    >\n      <icosahedronGeometry args={[1, 24]} />\n      <shaderMaterial\n        fragmentShader={frag}\n        vertexShader={vert}\n        uniforms={uniforms}\n        wireframe={false}\n      />\n    </mesh>\n  );\n};\n\nexport default Model;\n"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,mBAAmB;AACjD,SAASC,MAAM,EAAEC,QAAQ,QAAQ,oBAAoB;AACrD,SAASC,OAAO,EAAEC,MAAM,QAAQ,OAAO;AACvC,SAASC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,IAAI,GAAI;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,IAAI,GAAI;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB;EACA,MAAMC,IAAI,GAAGR,MAAM,CAAC,CAAC;EACrB,MAAMS,KAAK,GAAGT,MAAM,CAAC,KAAK,CAAC;EAE3B,MAAMU,QAAQ,GAAGX,OAAO,CACtB,OAAO;IACLY,OAAO,EAAE;MACPC,KAAK,EAAE;IACT,CAAC;IACDC,MAAM,EAAE;MACND,KAAK,EAAE;IACT;EACF,CAAC,CAAC,EACF,EACF,CAAC;EAEDd,QAAQ,CAAEgB,KAAK,IAAK;IAClB,MAAM;MAAEC;IAAM,CAAC,GAAGD,KAAK;IACvBN,IAAI,CAACQ,OAAO,CAACC,QAAQ,CAACP,QAAQ,CAACG,MAAM,CAACD,KAAK,GAAG,GAAG,GAAGG,KAAK,CAACG,cAAc,CAAC,CAAC;IAE1EV,IAAI,CAACQ,OAAO,CAACC,QAAQ,CAACP,QAAQ,CAACS,WAAW,CAACP,KAAK,GAAGX,SAAS,CAACmB,IAAI,CAC/DZ,IAAI,CAACQ,OAAO,CAACC,QAAQ,CAACP,QAAQ,CAACS,WAAW,CAACP,KAAK,EAChDH,KAAK,CAACO,OAAO,GAAG,IAAI,GAAG,IAAI,EAC3B,IACF,CAAC;EACH,CAAC,CAAC;EAEF,oBACEb,OAAA;IACEkB,GAAG,EAAEb,IAAK;IACVc,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAE;IACpBC,KAAK,EAAE,GAAI;IACXC,aAAa,EAAEA,CAAA,KAAOf,KAAK,CAACO,OAAO,GAAG,IAAM;IAC5CS,YAAY,EAAEA,CAAA,KAAOhB,KAAK,CAACO,OAAO,GAAG,KAAO;IAAAU,QAAA,gBAE5CvB,OAAA;MAAqBwB,IAAI,EAAE,CAAC,CAAC,EAAE,EAAE;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtC5B,OAAA;MACE6B,cAAc,EAAE3B,IAAK;MACrB4B,YAAY,EAAE7B,IAAK;MACnBM,QAAQ,EAAEA,QAAS;MACnBwB,SAAS,EAAE;IAAM;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEX,CAAC;AAACxB,EAAA,CA7CID,KAAK;EAAA,QAiBTR,QAAQ;AAAA;AAAAqC,EAAA,GAjBJ7B,KAAK;AA+CX,eAAeA,KAAK;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}