{"ast":null,"code":"import * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nfunction useHelper(object3D, helperConstructor) {\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n  const helper = React.useRef();\n  const scene = useThree(state => state.scene);\n  React.useLayoutEffect(() => {\n    let currentHelper = undefined;\n    if (object3D && object3D != null && object3D.current && helperConstructor) {\n      helper.current = currentHelper = new helperConstructor(object3D.current, ...args);\n    }\n    if (currentHelper) {\n      // Prevent the helpers from blocking rays\n      currentHelper.traverse(child => child.raycast = () => null);\n      scene.add(currentHelper);\n      return () => {\n        helper.current = undefined;\n        scene.remove(currentHelper);\n        currentHelper.dispose == null || currentHelper.dispose();\n      };\n    }\n  }, [scene, helperConstructor, object3D, ...args]);\n  useFrame(() => {\n    var _helper$current;\n    return void ((_helper$current = helper.current) == null || _helper$current.update == null ? void 0 : _helper$current.update());\n  });\n  return helper;\n}\n\n//\n\nconst Helper = _ref => {\n  let {\n    type: helperConstructor,\n    args = []\n  } = _ref;\n  const thisRef = React.useRef(null);\n  const parentRef = React.useRef(null);\n  React.useLayoutEffect(() => {\n    parentRef.current = thisRef.current.parent;\n  });\n  useHelper(parentRef, helperConstructor, ...args);\n  return /*#__PURE__*/React.createElement(\"object3D\", {\n    ref: thisRef\n  });\n};\nexport { Helper, useHelper };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}