{"ast":null,"code":"var _jsxFileName = \"/Users/niles/Desktop/Github/cmaj/firstProj/gui/src/3D/Sphere.js\",\n  _s = $RefreshSig$();\nimport { OrbitControls } from \"@react-three/drei\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { useMemo, useRef } from \"react\";\nimport { MathUtils } from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vert = `\nprecision mediump float;\nprecision mediump int;\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nuniform float time;\n\n//new code\nfloat pi = 3.14159265358979323846;\nvec3 orthogonal(vec3 v) {\n  return normalize(abs(v.x) > abs(v.z) ? vec3(-v.y, v.x, 0.0): vec3(0.0, -v.z, v.y));\n}\nvarying float intensity;\nuniform float u_time, u_scale;\nuniform float x1_freq, x2_freq, y1_freq, y2_freq, z1_freq, z2_freq;\nuniform float x1_amp, x2_amp, y1_amp, y2_amp, z1_amp, z2_amp;\nvec3 displace(vec3 point) {\n  return vec3((x1_amp * cos(-u_time + u_scale * x1_freq *( point.z/(2.*pi))))+(x2_amp * cos(u_time + u_scale * x2_freq*( point.y/(2.*pi)))), (y1_amp * cos(-u_time + u_scale * y1_freq *( point.z/(2.*pi))))+(y2_amp * cos(u_time + u_scale * y2_freq*( point.x/(2.*pi)))), (z1_amp * cos(u_time + u_scale * z1_freq*( point.y/(2.*pi))))+(z2_amp * cos(u_time + u_scale * z2_freq*( point.x/(2.*pi)))));\n}\n\nvoid main() {\n    \n    vec3 displacedPosition = position + displace(position);\n    float offset = 0.0140625;\n\n    vec3 tangent = orthogonal(normal);\n    vec3 bitangent = normalize(cross(normal, tangent));\n    vec3 neighbour1 = position + tangent * offset; //transformed was position???\n    vec3 neighbour2 = position + bitangent * offset;\n    vec3 displacedNeighbour1 = neighbour1 + displace(neighbour1);\n    vec3 displacedNeighbour2 = neighbour2 + displace(neighbour2);\n    \n    vec3 displacedTangent = displacedNeighbour1 - displacedPosition;\n    vec3 displacedBitangent = displacedNeighbour2 - displacedPosition;\n\n    vec3 displacedNormal = normalize(cross(displacedTangent, displacedBitangent));\n\n    vec3 transformed = displacedPosition;\n    vNormal = normalize(normalMatrix * displacedNormal);\n    intensity = pow(1.0 - abs(dot(normalize(normalMatrix * displacedNormal), vec3(0, 0, 1))), 1.);\n    vec3 pos = transformed;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.0);\n}\n`;\nconst frag = `\nprecision mediump float;\nvarying vec3 vpos;\nvarying float intensity;\nvec3 cosPalette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b * cos(6.28318 * (c * t + d));\n}\nuniform vec3 glowColor;\n\nvoid main() {\n    vec3 brightness = vec3(0.5, 0.5, 0.5);\n    vec3 contrast = vec3(0.5, 0.5, 0.5);\n    vec3 oscilation = vec3(1.0, 1.0, 1.0);\n    vec3 phase = vec3(0.2, 0.1, 0.0);\n    vec3 color = cosPalette(intensity, brightness, contrast, oscilation, phase);\n    vec3 glow = vec3(0.25,1.0,1.0) * intensity;\n    vec4 diffuseColor = vec4(color, 1.0);\n    \n    gl_FragColor = vec4(color, 1.0);\n}\n`;\nconst Model = ({\n  amps,\n  frqs\n}) => {\n  _s();\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n  const hover = useRef(false);\n  const uniforms = useMemo(() => ({\n    u_scale: {\n      value: 1.0\n    },\n    u_time: {\n      value: 0.0\n    },\n    x1_freq: {\n      value: 0.0\n    },\n    x2_freq: {\n      value: 0.0\n    },\n    y1_freq: {\n      value: 0.0\n    },\n    y2_freq: {\n      value: 0.0\n    },\n    z1_freq: {\n      value: 0.0\n    },\n    z2_freq: {\n      value: 0.0\n    },\n    x1_amp: {\n      value: 0.0\n    },\n    x2_amp: {\n      value: 0.0\n    },\n    y1_amp: {\n      value: 0.0\n    },\n    y2_amp: {\n      value: 0.0\n    },\n    z1_amp: {\n      value: 0.0\n    },\n    z2_amp: {\n      value: 0.0\n    }\n  }), []);\n  useFrame(state => {\n    const {\n      clock\n    } = state;\n    mesh.current.material.uniforms.u_time.value = 0.4 * clock.getElapsedTime();\n    mesh.current.material.uniforms.x1_freq.value = 5 + frqs[0] / 30;\n    mesh.current.material.uniforms.x2_freq.value = 5 + frqs[1] / 30;\n    mesh.current.material.uniforms.y1_freq.value = 5 + frqs[2] / 30;\n    mesh.current.material.uniforms.y2_freq.value = 5 + frqs[3] / 30;\n    mesh.current.material.uniforms.z1_freq.value = 5 + frqs[4] / 30;\n    mesh.current.material.uniforms.z2_freq.value = 5 + frqs[5] / 30;\n    console.log(frqs);\n    mesh.current.material.uniforms.x1_amp.value = amps[0] / 2;\n    mesh.current.material.uniforms.x2_amp.value = amps[1] / 2;\n    mesh.current.material.uniforms.y1_amp.value = amps[2] / 2;\n    mesh.current.material.uniforms.y2_amp.value = amps[3] / 2;\n    mesh.current.material.uniforms.z1_amp.value = amps[4] / 2;\n    mesh.current.material.uniforms.z2_amp.value = amps[5] / 2;\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: mesh,\n    position: [0, 0, 0],\n    scale: 1.5,\n    onPointerOver: () => hover.current = true,\n    onPointerOut: () => hover.current = false,\n    children: [/*#__PURE__*/_jsxDEV(\"icosahedronGeometry\", {\n      args: [0.75, 60]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"shaderMaterial\", {\n      fragmentShader: frag,\n      vertexShader: vert,\n      uniforms: uniforms,\n      wireframe: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(Model, \"MXLDZE1C+dDojK1hwP1kaSSOz3U=\", false, function () {\n  return [useFrame];\n});\n_c = Model;\nexport default Model;\nvar _c;\n$RefreshReg$(_c, \"Model\");","map":{"version":3,"names":["OrbitControls","Canvas","useFrame","useMemo","useRef","MathUtils","jsxDEV","_jsxDEV","vert","frag","Model","amps","frqs","_s","mesh","hover","uniforms","u_scale","value","u_time","x1_freq","x2_freq","y1_freq","y2_freq","z1_freq","z2_freq","x1_amp","x2_amp","y1_amp","y2_amp","z1_amp","z2_amp","state","clock","current","material","getElapsedTime","console","log","ref","position","scale","onPointerOver","onPointerOut","children","args","fileName","_jsxFileName","lineNumber","columnNumber","fragmentShader","vertexShader","wireframe","_c","$RefreshReg$"],"sources":["/Users/niles/Desktop/Github/cmaj/firstProj/gui/src/3D/Sphere.js"],"sourcesContent":["import { OrbitControls } from \"@react-three/drei\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { useMemo, useRef } from \"react\";\nimport { MathUtils } from \"three\";\n\nconst vert = `\nprecision mediump float;\nprecision mediump int;\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nuniform float time;\n\n//new code\nfloat pi = 3.14159265358979323846;\nvec3 orthogonal(vec3 v) {\n  return normalize(abs(v.x) > abs(v.z) ? vec3(-v.y, v.x, 0.0): vec3(0.0, -v.z, v.y));\n}\nvarying float intensity;\nuniform float u_time, u_scale;\nuniform float x1_freq, x2_freq, y1_freq, y2_freq, z1_freq, z2_freq;\nuniform float x1_amp, x2_amp, y1_amp, y2_amp, z1_amp, z2_amp;\nvec3 displace(vec3 point) {\n  return vec3((x1_amp * cos(-u_time + u_scale * x1_freq *( point.z/(2.*pi))))+(x2_amp * cos(u_time + u_scale * x2_freq*( point.y/(2.*pi)))), (y1_amp * cos(-u_time + u_scale * y1_freq *( point.z/(2.*pi))))+(y2_amp * cos(u_time + u_scale * y2_freq*( point.x/(2.*pi)))), (z1_amp * cos(u_time + u_scale * z1_freq*( point.y/(2.*pi))))+(z2_amp * cos(u_time + u_scale * z2_freq*( point.x/(2.*pi)))));\n}\n\nvoid main() {\n    \n    vec3 displacedPosition = position + displace(position);\n    float offset = 0.0140625;\n\n    vec3 tangent = orthogonal(normal);\n    vec3 bitangent = normalize(cross(normal, tangent));\n    vec3 neighbour1 = position + tangent * offset; //transformed was position???\n    vec3 neighbour2 = position + bitangent * offset;\n    vec3 displacedNeighbour1 = neighbour1 + displace(neighbour1);\n    vec3 displacedNeighbour2 = neighbour2 + displace(neighbour2);\n    \n    vec3 displacedTangent = displacedNeighbour1 - displacedPosition;\n    vec3 displacedBitangent = displacedNeighbour2 - displacedPosition;\n\n    vec3 displacedNormal = normalize(cross(displacedTangent, displacedBitangent));\n\n    vec3 transformed = displacedPosition;\n    vNormal = normalize(normalMatrix * displacedNormal);\n    intensity = pow(1.0 - abs(dot(normalize(normalMatrix * displacedNormal), vec3(0, 0, 1))), 1.);\n    vec3 pos = transformed;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.0);\n}\n`\n\nconst frag = `\nprecision mediump float;\nvarying vec3 vpos;\nvarying float intensity;\nvec3 cosPalette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b * cos(6.28318 * (c * t + d));\n}\nuniform vec3 glowColor;\n\nvoid main() {\n    vec3 brightness = vec3(0.5, 0.5, 0.5);\n    vec3 contrast = vec3(0.5, 0.5, 0.5);\n    vec3 oscilation = vec3(1.0, 1.0, 1.0);\n    vec3 phase = vec3(0.2, 0.1, 0.0);\n    vec3 color = cosPalette(intensity, brightness, contrast, oscilation, phase);\n    vec3 glow = vec3(0.25,1.0,1.0) * intensity;\n    vec4 diffuseColor = vec4(color, 1.0);\n    \n    gl_FragColor = vec4(color, 1.0);\n}\n`\n\nconst Model = ({amps, frqs}) => {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n  const hover = useRef(false);\n\n  const uniforms = useMemo(\n    () => ({\n      u_scale: {\n        value: 1.0,\n      },\n      u_time: {\n        value: 0.0,\n      },\n\n      x1_freq: {\n        value: 0.0,\n      }, \n      x2_freq: {\n        value: 0.0,\n      }, \n      y1_freq: {\n        value: 0.0,\n      }, \n      y2_freq: {\n        value: 0.0,\n      }, \n      z1_freq: {\n        value: 0.0,\n      }, \n      z2_freq: {\n        value: 0.0,\n      },\n      x1_amp: {\n        value: 0.0,\n      }, \n      x2_amp: {\n        value: 0.0,\n      },\n      y1_amp: {\n        value: 0.0,\n      }, \n      y2_amp: {\n        value: 0.0,\n      }, \n      z1_amp: {\n        value: 0.0,\n      }, \n      z2_amp: {\n        value: 0.0,\n      }\n    }),\n    []\n  );\n\n  useFrame((state) => {\n    const { clock } = state;\n    mesh.current.material.uniforms.u_time.value = 0.4 * clock.getElapsedTime();\n\n    mesh.current.material.uniforms.x1_freq.value = 5 + frqs[0] / 30;\n    mesh.current.material.uniforms.x2_freq.value = 5 + frqs[1] / 30;\n    mesh.current.material.uniforms.y1_freq.value = 5 + frqs[2] / 30;\n    mesh.current.material.uniforms.y2_freq.value = 5 + frqs[3] / 30;\n    mesh.current.material.uniforms.z1_freq.value = 5 + frqs[4] / 30;\n    mesh.current.material.uniforms.z2_freq.value = 5 + frqs[5] / 30;\n\n    console.log(frqs);\n\n    mesh.current.material.uniforms.x1_amp.value = amps[0] / 2;\n    mesh.current.material.uniforms.x2_amp.value = amps[1] / 2;\n    mesh.current.material.uniforms.y1_amp.value = amps[2] / 2;\n    mesh.current.material.uniforms.y2_amp.value = amps[3] / 2;\n    mesh.current.material.uniforms.z1_amp.value = amps[4] / 2;\n    mesh.current.material.uniforms.z2_amp.value = amps[5] / 2;\n  });\n\n  return (\n    <mesh\n      ref={mesh}\n      position={[0, 0, 0]}\n      scale={1.5}\n      onPointerOver={() => (hover.current = true)}\n      onPointerOut={() => (hover.current = false)}\n    >\n      <icosahedronGeometry args={[0.75, 60]}/>\n      <shaderMaterial\n        fragmentShader={frag}\n        vertexShader={vert}\n        uniforms={uniforms}\n        wireframe={false}\n      />\n    </mesh>\n  );\n};\n\nexport default Model;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}