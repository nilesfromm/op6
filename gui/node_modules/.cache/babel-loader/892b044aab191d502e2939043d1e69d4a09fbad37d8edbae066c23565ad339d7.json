{"ast":null,"code":"var _jsxFileName = \"/Users/niles/Desktop/Github/cmaj/firstProj/gui/src/3D/Sphere.js\",\n  _s = $RefreshSig$();\nimport { OrbitControls } from \"@react-three/drei\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { useMemo, useRef } from \"react\";\nimport { MathUtils } from \"three\";\n\n// import vertexShader from \"!!raw-loader!./vertexShader.glsl\";\n// import fragmentShader from \"!!raw-loader!./fragmentShader.glsl\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vert = `\nprecision mediump float;\nprecision mediump int;\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nuniform float time;\n\n//new code\nfloat pi = 3.14159265358979323846;\nvec3 orthogonal(vec3 v) {\n  return normalize(abs(v.x) > abs(v.z) ? vec3(-v.y, v.x, 0.0): vec3(0.0, -v.z, v.y));\n}\nvarying float intensity;\nuniform float u_time, u_scale;\nuniform float x_freq, y_freq, z_freq, w_freq;\nuniform float x_amp, y_amp, z_amp, w_amp;\nvec3 displace(vec3 point) {\n  return vec3(0., (.1 * sin(-time + 1. * 20.*( point.z/(2.*pi))))+(y_amp * sin(time + u_scale * y_freq*( point.x/(2.*pi)))), (z_amp * sin(time + u_scale * z_freq*( point.y/(2.*pi))))+(w_amp * sin(time + u_scale * w_freq*( point.x/(2.*pi)))));\n}\n\nvoid main() {\n    \n    vec3 displacedPosition = position + displace(position);\n    float offset = 0.0140625;\n\n    vec3 tangent = orthogonal(normal);\n    vec3 bitangent = normalize(cross(normal, tangent));\n    vec3 neighbour1 = position + tangent * offset; //transformed was position???\n    vec3 neighbour2 = position + bitangent * offset;\n    vec3 displacedNeighbour1 = neighbour1 + displace(neighbour1);\n    vec3 displacedNeighbour2 = neighbour2 + displace(neighbour2);\n    \n    vec3 displacedTangent = displacedNeighbour1 - displacedPosition;\n    vec3 displacedBitangent = displacedNeighbour2 - displacedPosition;\n\n    vec3 displacedNormal = normalize(cross(displacedTangent, displacedBitangent));\n\n    vec3 transformed = displacedPosition;\n    vNormal = normalize(normalMatrix * displacedNormal);\n    intensity = pow(1.0 - abs(dot(normalize(normalMatrix * displacedNormal), vec3(0, 0, 1))), 1.);\n    vec3 pos = transformed;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.0);\n}\n`;\nconst vertexShader = `\nuniform float u_intensity;\nuniform float u_time;\n\nvarying vec2 vUv;\nvarying float vDisplacement;\n\n\n// Classic Perlin 3D Noise \n// by Stefan Gustavson\n//\nvec4 permute(vec4 x) {\n    return mod(((x*34.0)+1.0)*x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\nfloat cnoise(vec3 P) {\n    vec3 Pi0 = floor(P); // Integer part for indexing\n    vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n    Pi0 = mod(Pi0, 289.0);\n    Pi1 = mod(Pi1, 289.0);\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n    vec4 iz0 = Pi0.zzzz;\n    vec4 iz1 = Pi1.zzzz;\n\n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n\n    vec4 gx0 = ixy0 / 7.0;\n    vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n    gx0 = fract(gx0);\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n    vec4 sz0 = step(gz0, vec4(0.0));\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n    vec4 gx1 = ixy1 / 7.0;\n    vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n    gx1 = fract(gx1);\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n    vec4 sz1 = step(gz1, vec4(0.0));\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n    g000 *= norm0.x;\n    g010 *= norm0.y;\n    g100 *= norm0.z;\n    g110 *= norm0.w;\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n    g001 *= norm1.x;\n    g011 *= norm1.y;\n    g101 *= norm1.z;\n    g111 *= norm1.w;\n\n    float n000 = dot(g000, Pf0);\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n    float n111 = dot(g111, Pf1);\n\n    vec3 fade_xyz = fade(Pf0);\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n    return 2.2 * n_xyz;\n}\n\n// End of Perlin Noise Code\n\nvoid main() {\n  vUv = uv;\n\n  vDisplacement = cnoise(position + vec3(2.0 * u_time));\n\n  vec3 newPosition = position + normal * (u_intensity * vDisplacement);\n\n  vec4 modelPosition = modelMatrix * vec4(newPosition, 1.0);\n  vec4 viewPosition = viewMatrix * modelPosition;\n  vec4 projectedPosition = projectionMatrix * viewPosition;\n\n  gl_Position = projectedPosition;\n}\n`;\nconst frag = `\nprecision mediump float;\nvarying vec3 vpos;\nvarying float intensity;\nvec3 cosPalette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b * cos(6.28318 * (c * t + d));\n}\nuniform vec3 glowColor;\n\nvoid main() {\n    vec3 brightness = vec3(0.5, 0.5, 0.5);\n    vec3 contrast = vec3(0.5, 0.5, 0.5);\n    vec3 oscilation = vec3(1.0, 1.0, 1.0);\n    vec3 phase = vec3(0.2, 0.1, 0.0);\n    vec3 color = cosPalette(intensity, brightness, contrast, oscilation, phase);\n    vec3 glow = vec3(0.25,1.0,1.0) * intensity;\n    vec4 diffuseColor = vec4(color, 1.0);\n    \n    gl_FragColor = vec4(color, 1.0);\n}\n`;\nconst fragmentShader = `\nuniform float u_intensity;\nuniform float u_time;\n\nvarying vec2 vUv;\nvarying float vDisplacement;\n\nvoid main() {\n  float distort = 2.0 * vDisplacement * u_intensity;\n\n  vec3 color = vec3(abs(vUv - 0.5) * 2.0  * (1.0 - distort), 1.0);\n  \n  gl_FragColor = vec4(color ,1.0);\n}\n`;\nconst Model = () => {\n  _s();\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n  const hover = useRef(false);\n  const uniforms = useMemo(() => ({\n    u_intensity: {\n      value: 0.3\n    },\n    u_time: {\n      value: 0.0\n    }\n  }), []);\n  useFrame(state => {\n    const {\n      clock\n    } = state;\n    mesh.current.material.uniforms.u_time.value = 0.4 * clock.getElapsedTime();\n    mesh.current.material.uniforms.u_intensity.value = MathUtils.lerp(mesh.current.material.uniforms.u_intensity.value, hover.current ? 0.85 : 0.15, 0.02);\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    ref: mesh,\n    position: [0, 0, 0],\n    scale: 1.5,\n    onPointerOver: () => hover.current = true,\n    onPointerOut: () => hover.current = false,\n    children: [/*#__PURE__*/_jsxDEV(\"icosahedronGeometry\", {\n      args: [1, 2]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"shaderMaterial\", {\n      fragmentShader: frag,\n      vertexShader: vert,\n      uniforms: uniforms,\n      wireframe: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 5\n  }, this);\n};\n_s(Model, \"MXLDZE1C+dDojK1hwP1kaSSOz3U=\", false, function () {\n  return [useFrame];\n});\n_c = Model;\nexport default Model;\nvar _c;\n$RefreshReg$(_c, \"Model\");","map":{"version":3,"names":["OrbitControls","Canvas","useFrame","useMemo","useRef","MathUtils","jsxDEV","_jsxDEV","vert","vertexShader","frag","fragmentShader","Model","_s","mesh","hover","uniforms","u_intensity","value","u_time","state","clock","current","material","getElapsedTime","lerp","ref","position","scale","onPointerOver","onPointerOut","children","args","fileName","_jsxFileName","lineNumber","columnNumber","wireframe","_c","$RefreshReg$"],"sources":["/Users/niles/Desktop/Github/cmaj/firstProj/gui/src/3D/Sphere.js"],"sourcesContent":["import { OrbitControls } from \"@react-three/drei\";\nimport { Canvas, useFrame } from \"@react-three/fiber\";\nimport { useMemo, useRef } from \"react\";\nimport { MathUtils } from \"three\";\n\n// import vertexShader from \"!!raw-loader!./vertexShader.glsl\";\n// import fragmentShader from \"!!raw-loader!./fragmentShader.glsl\";\n\nconst vert = `\nprecision mediump float;\nprecision mediump int;\n\nvarying vec2 vUv;\nvarying vec3 vPosition;\nvarying vec3 vNormal;\nuniform float time;\n\n//new code\nfloat pi = 3.14159265358979323846;\nvec3 orthogonal(vec3 v) {\n  return normalize(abs(v.x) > abs(v.z) ? vec3(-v.y, v.x, 0.0): vec3(0.0, -v.z, v.y));\n}\nvarying float intensity;\nuniform float u_time, u_scale;\nuniform float x_freq, y_freq, z_freq, w_freq;\nuniform float x_amp, y_amp, z_amp, w_amp;\nvec3 displace(vec3 point) {\n  return vec3(0., (.1 * sin(-time + 1. * 20.*( point.z/(2.*pi))))+(y_amp * sin(time + u_scale * y_freq*( point.x/(2.*pi)))), (z_amp * sin(time + u_scale * z_freq*( point.y/(2.*pi))))+(w_amp * sin(time + u_scale * w_freq*( point.x/(2.*pi)))));\n}\n\nvoid main() {\n    \n    vec3 displacedPosition = position + displace(position);\n    float offset = 0.0140625;\n\n    vec3 tangent = orthogonal(normal);\n    vec3 bitangent = normalize(cross(normal, tangent));\n    vec3 neighbour1 = position + tangent * offset; //transformed was position???\n    vec3 neighbour2 = position + bitangent * offset;\n    vec3 displacedNeighbour1 = neighbour1 + displace(neighbour1);\n    vec3 displacedNeighbour2 = neighbour2 + displace(neighbour2);\n    \n    vec3 displacedTangent = displacedNeighbour1 - displacedPosition;\n    vec3 displacedBitangent = displacedNeighbour2 - displacedPosition;\n\n    vec3 displacedNormal = normalize(cross(displacedTangent, displacedBitangent));\n\n    vec3 transformed = displacedPosition;\n    vNormal = normalize(normalMatrix * displacedNormal);\n    intensity = pow(1.0 - abs(dot(normalize(normalMatrix * displacedNormal), vec3(0, 0, 1))), 1.);\n    vec3 pos = transformed;\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.0);\n}\n`\n\nconst vertexShader = `\nuniform float u_intensity;\nuniform float u_time;\n\nvarying vec2 vUv;\nvarying float vDisplacement;\n\n\n// Classic Perlin 3D Noise \n// by Stefan Gustavson\n//\nvec4 permute(vec4 x) {\n    return mod(((x*34.0)+1.0)*x, 289.0);\n}\n\nvec4 taylorInvSqrt(vec4 r) {\n    return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade(vec3 t) {\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\nfloat cnoise(vec3 P) {\n    vec3 Pi0 = floor(P); // Integer part for indexing\n    vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n    Pi0 = mod(Pi0, 289.0);\n    Pi1 = mod(Pi1, 289.0);\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n    vec4 iz0 = Pi0.zzzz;\n    vec4 iz1 = Pi1.zzzz;\n\n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n\n    vec4 gx0 = ixy0 / 7.0;\n    vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n    gx0 = fract(gx0);\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n    vec4 sz0 = step(gz0, vec4(0.0));\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n    vec4 gx1 = ixy1 / 7.0;\n    vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n    gx1 = fract(gx1);\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n    vec4 sz1 = step(gz1, vec4(0.0));\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n    g000 *= norm0.x;\n    g010 *= norm0.y;\n    g100 *= norm0.z;\n    g110 *= norm0.w;\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n    g001 *= norm1.x;\n    g011 *= norm1.y;\n    g101 *= norm1.z;\n    g111 *= norm1.w;\n\n    float n000 = dot(g000, Pf0);\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n    float n111 = dot(g111, Pf1);\n\n    vec3 fade_xyz = fade(Pf0);\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n    return 2.2 * n_xyz;\n}\n\n// End of Perlin Noise Code\n\nvoid main() {\n  vUv = uv;\n\n  vDisplacement = cnoise(position + vec3(2.0 * u_time));\n\n  vec3 newPosition = position + normal * (u_intensity * vDisplacement);\n\n  vec4 modelPosition = modelMatrix * vec4(newPosition, 1.0);\n  vec4 viewPosition = viewMatrix * modelPosition;\n  vec4 projectedPosition = projectionMatrix * viewPosition;\n\n  gl_Position = projectedPosition;\n}\n`\n\nconst frag = `\nprecision mediump float;\nvarying vec3 vpos;\nvarying float intensity;\nvec3 cosPalette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {\n    return a + b * cos(6.28318 * (c * t + d));\n}\nuniform vec3 glowColor;\n\nvoid main() {\n    vec3 brightness = vec3(0.5, 0.5, 0.5);\n    vec3 contrast = vec3(0.5, 0.5, 0.5);\n    vec3 oscilation = vec3(1.0, 1.0, 1.0);\n    vec3 phase = vec3(0.2, 0.1, 0.0);\n    vec3 color = cosPalette(intensity, brightness, contrast, oscilation, phase);\n    vec3 glow = vec3(0.25,1.0,1.0) * intensity;\n    vec4 diffuseColor = vec4(color, 1.0);\n    \n    gl_FragColor = vec4(color, 1.0);\n}\n`\nconst fragmentShader = `\nuniform float u_intensity;\nuniform float u_time;\n\nvarying vec2 vUv;\nvarying float vDisplacement;\n\nvoid main() {\n  float distort = 2.0 * vDisplacement * u_intensity;\n\n  vec3 color = vec3(abs(vUv - 0.5) * 2.0  * (1.0 - distort), 1.0);\n  \n  gl_FragColor = vec4(color ,1.0);\n}\n`\n\nconst Model = () => {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n  const hover = useRef(false);\n\n  const uniforms = useMemo(\n    () => ({\n      u_intensity: {\n        value: 0.3,\n      },\n      u_time: {\n        value: 0.0,\n      },\n    }),\n    []\n  );\n\n  useFrame((state) => {\n    const { clock } = state;\n    mesh.current.material.uniforms.u_time.value = 0.4 * clock.getElapsedTime();\n\n    mesh.current.material.uniforms.u_intensity.value = MathUtils.lerp(\n      mesh.current.material.uniforms.u_intensity.value,\n      hover.current ? 0.85 : 0.15,\n      0.02\n    );\n  });\n\n  return (\n    <mesh\n      ref={mesh}\n      position={[0, 0, 0]}\n      scale={1.5}\n      onPointerOver={() => (hover.current = true)}\n      onPointerOut={() => (hover.current = false)}\n    >\n      <icosahedronGeometry args={[1, 2]} />\n      <shaderMaterial\n        fragmentShader={frag}\n        vertexShader={vert}\n        uniforms={uniforms}\n        wireframe={false}\n      />\n    </mesh>\n  );\n};\n\nexport default Model;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}