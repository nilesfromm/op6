{"ast":null,"code":"var _jsxFileName = \"/Users/niles/Desktop/Github/cmaj/firstProj/gui/src/SpectrumAnalyzer.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SpectrumAnalyzer = ({\n  fftData,\n  sampleRate,\n  frequencyIntervals\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const requestRef = useRef(null);\n  const prevFftDataRef = useRef([]);\n  const smoothData = (currentData, prevData, smoothingFactor) => {\n    return currentData.map((value, i) => {\n      return prevData[i] * (1 - smoothingFactor) + value * smoothingFactor;\n    });\n  };\n  const drawLines = (ctx, width, height) => {\n    ctx.strokeStyle = \"#BFBFBF\";\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n\n    // Draw horizontal grid lines (linear scale for magnitude)\n    const numHorizontalLines = 7;\n    for (let i = 0; i <= numHorizontalLines; i++) {\n      const y = i / numHorizontalLines * (height - 300) + 190;\n      ctx.moveTo(0, y);\n      ctx.lineTo(width, y);\n    }\n    ctx.stroke();\n  };\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    if (!prevFftDataRef.current.length) {\n      prevFftDataRef.current = new Array(fftData.length).fill(0);\n    }\n    const draw = () => {\n      const width = canvas.width;\n      const height = canvas.height;\n      const barWidth = width / (frequencyIntervals.length - 1);\n\n      // Clear canvas\n      ctx.clearRect(0, 0, width, height);\n      ctx.fillStyle = \"#A0A0A0\";\n      ctx.fillRect(0, 0, width, height);\n\n      // Draw grid\n      drawLines(ctx, width, height);\n\n      // Smooth FFT data\n      const smoothedFftData = smoothData(fftData, prevFftDataRef.current, 0.2);\n\n      // Draw spectrum\n      ctx.strokeStyle = \"black\";\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.moveTo(0, height);\n      frequencyIntervals.slice(0, -1).forEach((startFreq, i) => {\n        const endFreq = frequencyIntervals[i + 1];\n        const startIndex = Math.floor(startFreq / (sampleRate / 2) * smoothedFftData.length);\n        const endIndex = Math.floor(endFreq / (sampleRate / 2) * smoothedFftData.length);\n        for (let j = startIndex; j <= endIndex; j++) {\n          const magnitude = smoothedFftData[j];\n          const y = height - Math.log10(magnitude + 1) / 6 * height * 2;\n          const x = i * barWidth + (j - startIndex) / (endIndex - startIndex) * barWidth;\n          ctx.lineTo(x, y);\n        }\n      });\n      ctx.lineTo(width, height);\n      ctx.stroke();\n\n      // Draw frequency labels\n      ctx.fillStyle = \"white\";\n      ctx.font = \"20px Arial\";\n      ctx.textAlign = \"center\";\n      ctx.textBaseline = \"top\";\n      const labelWidth = (width - 80) / (frequencyIntervals.length - 1);\n      frequencyIntervals.forEach((freq, i) => {\n        const labelX = i * labelWidth + 30;\n        ctx.fillText(freq, labelX, height - 30);\n      });\n      prevFftDataRef.current = smoothedFftData;\n      requestRef.current = requestAnimationFrame(draw);\n    };\n    requestRef.current = requestAnimationFrame(draw);\n    return () => {\n      cancelAnimationFrame(requestRef.current);\n    };\n  }, [fftData, sampleRate, frequencyIntervals]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      width: 2000,\n      height: 1000,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(SpectrumAnalyzer, \"yyOffO8fSMd6p9mGOLBMMkpM9ho=\");\n_c = SpectrumAnalyzer;\nvar _c;\n$RefreshReg$(_c, \"SpectrumAnalyzer\");","map":{"version":3,"names":["useEffect","useRef","jsxDEV","_jsxDEV","SpectrumAnalyzer","fftData","sampleRate","frequencyIntervals","_s","canvasRef","requestRef","prevFftDataRef","smoothData","currentData","prevData","smoothingFactor","map","value","i","drawLines","ctx","width","height","strokeStyle","lineWidth","beginPath","numHorizontalLines","y","moveTo","lineTo","stroke","canvas","current","getContext","length","Array","fill","draw","barWidth","clearRect","fillStyle","fillRect","smoothedFftData","slice","forEach","startFreq","endFreq","startIndex","Math","floor","endIndex","j","magnitude","log10","x","font","textAlign","textBaseline","labelWidth","freq","labelX","fillText","requestAnimationFrame","cancelAnimationFrame","children","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/niles/Desktop/Github/cmaj/firstProj/gui/src/SpectrumAnalyzer.jsx"],"sourcesContent":["import { useEffect, useRef } from \"react\";\n\nexport const SpectrumAnalyzer = ({\n  fftData,\n  sampleRate,\n  frequencyIntervals,\n}) => {\n  const canvasRef = useRef(null);\n  const requestRef = useRef(null);\n  const prevFftDataRef = useRef([]);\n\n  const smoothData = (currentData, prevData, smoothingFactor) => {\n    return currentData.map((value, i) => {\n      return prevData[i] * (1 - smoothingFactor) + value * smoothingFactor;\n    });\n  };\n\n  const drawLines = (ctx, width, height) => {\n    ctx.strokeStyle = \"#BFBFBF\";\n    ctx.lineWidth = 1;\n    ctx.beginPath();\n\n    // Draw horizontal grid lines (linear scale for magnitude)\n    const numHorizontalLines = 7;\n    for (let i = 0; i <= numHorizontalLines; i++) {\n      const y = (i / numHorizontalLines) * (height - 300) + 190;\n      ctx.moveTo(0, y);\n      ctx.lineTo(width, y);\n    }\n\n    ctx.stroke();\n  };\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n\n    if (!prevFftDataRef.current.length) {\n      prevFftDataRef.current = new Array(fftData.length).fill(0);\n    }\n\n    const draw = () => {\n      const width = canvas.width;\n      const height = canvas.height;\n      const barWidth = width / (frequencyIntervals.length - 1);\n\n      // Clear canvas\n      ctx.clearRect(0, 0, width, height);\n      ctx.fillStyle = \"#A0A0A0\";\n      ctx.fillRect(0, 0, width, height);\n\n      // Draw grid\n      drawLines(ctx, width, height);\n\n      // Smooth FFT data\n      const smoothedFftData = smoothData(fftData, prevFftDataRef.current, 0.2);\n\n      // Draw spectrum\n      ctx.strokeStyle = \"black\";\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.moveTo(0, height);\n\n      frequencyIntervals.slice(0, -1).forEach((startFreq, i) => {\n        const endFreq = frequencyIntervals[i + 1];\n        const startIndex = Math.floor(\n          (startFreq / (sampleRate / 2)) * smoothedFftData.length\n        );\n        const endIndex = Math.floor(\n          (endFreq / (sampleRate / 2)) * smoothedFftData.length\n        );\n\n        for (let j = startIndex; j <= endIndex; j++) {\n          const magnitude = smoothedFftData[j];\n          const y = height - (Math.log10(magnitude + 1) / 6) * height * 2;\n          const x =\n            i * barWidth +\n            ((j - startIndex) / (endIndex - startIndex)) * barWidth;\n          ctx.lineTo(x, y);\n        }\n      });\n\n      ctx.lineTo(width, height);\n      ctx.stroke();\n\n      // Draw frequency labels\n      ctx.fillStyle = \"white\";\n      ctx.font = \"20px Arial\";\n      ctx.textAlign = \"center\";\n      ctx.textBaseline = \"top\";\n\n      const labelWidth = (width - 80) / (frequencyIntervals.length - 1);\n      frequencyIntervals.forEach((freq, i) => {\n        const labelX = i * labelWidth + 30;\n        ctx.fillText(freq, labelX, height - 30);\n      });\n\n      prevFftDataRef.current = smoothedFftData;\n      requestRef.current = requestAnimationFrame(draw);\n    };\n\n    requestRef.current = requestAnimationFrame(draw);\n\n    return () => {\n      cancelAnimationFrame(requestRef.current);\n    };\n  }, [fftData, sampleRate, frequencyIntervals]);\n\n  return (\n    <div>\n      <canvas\n        ref={canvasRef}\n        width={2000}\n        height={1000}\n        style={{ width: \"100%\", height: \"100%\" }}\n      />\n    </div>\n  );\n};\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,OAAO,MAAMC,gBAAgB,GAAGA,CAAC;EAC/BC,OAAO;EACPC,UAAU;EACVC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,SAAS,GAAGR,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAMS,UAAU,GAAGT,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAMU,cAAc,GAAGV,MAAM,CAAC,EAAE,CAAC;EAEjC,MAAMW,UAAU,GAAGA,CAACC,WAAW,EAAEC,QAAQ,EAAEC,eAAe,KAAK;IAC7D,OAAOF,WAAW,CAACG,GAAG,CAAC,CAACC,KAAK,EAAEC,CAAC,KAAK;MACnC,OAAOJ,QAAQ,CAACI,CAAC,CAAC,IAAI,CAAC,GAAGH,eAAe,CAAC,GAAGE,KAAK,GAAGF,eAAe;IACtE,CAAC,CAAC;EACJ,CAAC;EAED,MAAMI,SAAS,GAAGA,CAACC,GAAG,EAAEC,KAAK,EAAEC,MAAM,KAAK;IACxCF,GAAG,CAACG,WAAW,GAAG,SAAS;IAC3BH,GAAG,CAACI,SAAS,GAAG,CAAC;IACjBJ,GAAG,CAACK,SAAS,CAAC,CAAC;;IAEf;IACA,MAAMC,kBAAkB,GAAG,CAAC;IAC5B,KAAK,IAAIR,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIQ,kBAAkB,EAAER,CAAC,EAAE,EAAE;MAC5C,MAAMS,CAAC,GAAIT,CAAC,GAAGQ,kBAAkB,IAAKJ,MAAM,GAAG,GAAG,CAAC,GAAG,GAAG;MACzDF,GAAG,CAACQ,MAAM,CAAC,CAAC,EAAED,CAAC,CAAC;MAChBP,GAAG,CAACS,MAAM,CAACR,KAAK,EAAEM,CAAC,CAAC;IACtB;IAEAP,GAAG,CAACU,MAAM,CAAC,CAAC;EACd,CAAC;EAED9B,SAAS,CAAC,MAAM;IACd,MAAM+B,MAAM,GAAGtB,SAAS,CAACuB,OAAO;IAChC,MAAMZ,GAAG,GAAGW,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;IAEnC,IAAI,CAACtB,cAAc,CAACqB,OAAO,CAACE,MAAM,EAAE;MAClCvB,cAAc,CAACqB,OAAO,GAAG,IAAIG,KAAK,CAAC9B,OAAO,CAAC6B,MAAM,CAAC,CAACE,IAAI,CAAC,CAAC,CAAC;IAC5D;IAEA,MAAMC,IAAI,GAAGA,CAAA,KAAM;MACjB,MAAMhB,KAAK,GAAGU,MAAM,CAACV,KAAK;MAC1B,MAAMC,MAAM,GAAGS,MAAM,CAACT,MAAM;MAC5B,MAAMgB,QAAQ,GAAGjB,KAAK,IAAId,kBAAkB,CAAC2B,MAAM,GAAG,CAAC,CAAC;;MAExD;MACAd,GAAG,CAACmB,SAAS,CAAC,CAAC,EAAE,CAAC,EAAElB,KAAK,EAAEC,MAAM,CAAC;MAClCF,GAAG,CAACoB,SAAS,GAAG,SAAS;MACzBpB,GAAG,CAACqB,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEpB,KAAK,EAAEC,MAAM,CAAC;;MAEjC;MACAH,SAAS,CAACC,GAAG,EAAEC,KAAK,EAAEC,MAAM,CAAC;;MAE7B;MACA,MAAMoB,eAAe,GAAG9B,UAAU,CAACP,OAAO,EAAEM,cAAc,CAACqB,OAAO,EAAE,GAAG,CAAC;;MAExE;MACAZ,GAAG,CAACG,WAAW,GAAG,OAAO;MACzBH,GAAG,CAACI,SAAS,GAAG,CAAC;MACjBJ,GAAG,CAACK,SAAS,CAAC,CAAC;MACfL,GAAG,CAACQ,MAAM,CAAC,CAAC,EAAEN,MAAM,CAAC;MAErBf,kBAAkB,CAACoC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,CAACC,SAAS,EAAE3B,CAAC,KAAK;QACxD,MAAM4B,OAAO,GAAGvC,kBAAkB,CAACW,CAAC,GAAG,CAAC,CAAC;QACzC,MAAM6B,UAAU,GAAGC,IAAI,CAACC,KAAK,CAC1BJ,SAAS,IAAIvC,UAAU,GAAG,CAAC,CAAC,GAAIoC,eAAe,CAACR,MACnD,CAAC;QACD,MAAMgB,QAAQ,GAAGF,IAAI,CAACC,KAAK,CACxBH,OAAO,IAAIxC,UAAU,GAAG,CAAC,CAAC,GAAIoC,eAAe,CAACR,MACjD,CAAC;QAED,KAAK,IAAIiB,CAAC,GAAGJ,UAAU,EAAEI,CAAC,IAAID,QAAQ,EAAEC,CAAC,EAAE,EAAE;UAC3C,MAAMC,SAAS,GAAGV,eAAe,CAACS,CAAC,CAAC;UACpC,MAAMxB,CAAC,GAAGL,MAAM,GAAI0B,IAAI,CAACK,KAAK,CAACD,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,GAAI9B,MAAM,GAAG,CAAC;UAC/D,MAAMgC,CAAC,GACLpC,CAAC,GAAGoB,QAAQ,GACX,CAACa,CAAC,GAAGJ,UAAU,KAAKG,QAAQ,GAAGH,UAAU,CAAC,GAAIT,QAAQ;UACzDlB,GAAG,CAACS,MAAM,CAACyB,CAAC,EAAE3B,CAAC,CAAC;QAClB;MACF,CAAC,CAAC;MAEFP,GAAG,CAACS,MAAM,CAACR,KAAK,EAAEC,MAAM,CAAC;MACzBF,GAAG,CAACU,MAAM,CAAC,CAAC;;MAEZ;MACAV,GAAG,CAACoB,SAAS,GAAG,OAAO;MACvBpB,GAAG,CAACmC,IAAI,GAAG,YAAY;MACvBnC,GAAG,CAACoC,SAAS,GAAG,QAAQ;MACxBpC,GAAG,CAACqC,YAAY,GAAG,KAAK;MAExB,MAAMC,UAAU,GAAG,CAACrC,KAAK,GAAG,EAAE,KAAKd,kBAAkB,CAAC2B,MAAM,GAAG,CAAC,CAAC;MACjE3B,kBAAkB,CAACqC,OAAO,CAAC,CAACe,IAAI,EAAEzC,CAAC,KAAK;QACtC,MAAM0C,MAAM,GAAG1C,CAAC,GAAGwC,UAAU,GAAG,EAAE;QAClCtC,GAAG,CAACyC,QAAQ,CAACF,IAAI,EAAEC,MAAM,EAAEtC,MAAM,GAAG,EAAE,CAAC;MACzC,CAAC,CAAC;MAEFX,cAAc,CAACqB,OAAO,GAAGU,eAAe;MACxChC,UAAU,CAACsB,OAAO,GAAG8B,qBAAqB,CAACzB,IAAI,CAAC;IAClD,CAAC;IAED3B,UAAU,CAACsB,OAAO,GAAG8B,qBAAqB,CAACzB,IAAI,CAAC;IAEhD,OAAO,MAAM;MACX0B,oBAAoB,CAACrD,UAAU,CAACsB,OAAO,CAAC;IAC1C,CAAC;EACH,CAAC,EAAE,CAAC3B,OAAO,EAAEC,UAAU,EAAEC,kBAAkB,CAAC,CAAC;EAE7C,oBACEJ,OAAA;IAAA6D,QAAA,eACE7D,OAAA;MACE8D,GAAG,EAAExD,SAAU;MACfY,KAAK,EAAE,IAAK;MACZC,MAAM,EAAE,IAAK;MACb4C,KAAK,EAAE;QAAE7C,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAO;IAAE;MAAA6C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC9D,EAAA,CApHWJ,gBAAgB;AAAAmE,EAAA,GAAhBnE,gBAAgB;AAAA,IAAAmE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}