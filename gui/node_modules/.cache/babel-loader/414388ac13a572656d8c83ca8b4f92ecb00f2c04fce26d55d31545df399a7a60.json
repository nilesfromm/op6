{"ast":null,"code":"var _jsxFileName = \"/Users/niles/Desktop/Github/cmaj/firstProj/gui/src/3D/Sphere.js\",\n  _s = $RefreshSig$();\nimport { useRef } from 'react';\nimport { Color, AdditiveBlending } from 'three';\nimport { Canvas, extend, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Sparkles, shaderMaterial, useGLTF, useTexture } from '@react-three/drei';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Model(props) {\n  _s();\n  const portalMaterial = useRef();\n  useFrame((state, delta) => portalMaterial.current.uTime += delta);\n  return (\n    /*#__PURE__*/\n    // <group {...props} dispose={null}>\n    //   <mesh geometry={nodes.portalCircle.geometry} position={[0, 0.78, 1.6]} rotation={[-Math.PI / 2, 0, 0]}>\n    //     <portalMaterial ref={portalMaterial} blending={AdditiveBlending} uColorStart=\"hotpink\" uColorEnd=\"white\" />\n    //   </mesh>\n    //   <mesh geometry={nodes.lampLightL.geometry} material-color=\"#f0bf94\" position={[0.89, 1.07, -0.14]} scale={[0.07, 0.11, 0.07]} />\n    //   <mesh geometry={nodes.lampLightR.geometry} material-color=\"#f0bf94\" position={[-0.98, 1.07, -0.14]} scale={[-0.07, 0.11, 0.07]} />\n    //   <mesh geometry={nodes.baked.geometry} position={[0.9, 0.34, -1.47]} rotation={[0, 0.14, 0]}>\n    //     <meshBasicMaterial map={bakedTexture} map-flipY={false} />\n    //   </mesh>\n    // </group>\n    _jsxDEV(\"mesh\", {\n      position: [0, 0, 0],\n      children: /*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n        attach: \"geometry\",\n        args: [1.8, 128, 128]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }, this)\n  );\n}\n\n// const PortalMaterial = shaderMaterial(\n//   { uTime: 0, uColorStart: new Color('hotpink'), uColorEnd: new Color('white') },\n//   glsl`\n//   varying vec2 vUv;\n//   void main() {\n//     vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n//     vec4 viewPosition = viewMatrix * modelPosition;\n//     vec4 projectionPosition = projectionMatrix * viewPosition;\n//     gl_Position = projectionPosition;\n//     vUv = uv;\n//   }`,\n//   glsl`\n//   #pragma glslify: cnoise3 = require(glsl-noise/classic/3d.glsl) \n//   uniform float uTime;\n//   uniform vec3 uColorStart;\n//   uniform vec3 uColorEnd;\n//   varying vec2 vUv;\n//   void main() {\n//     vec2 displacedUv = vUv + cnoise3(vec3(vUv * 7.0, uTime * 0.1));\n//     float strength = cnoise3(vec3(displacedUv * 5.0, uTime * 0.2));\n//     float outerGlow = distance(vUv, vec2(0.5)) * 4.0 - 1.4;\n//     strength += outerGlow;\n//     strength += step(-0.2, strength) * 0.8;\n//     strength = clamp(strength, 0.0, 1.0);\n//     vec3 color = mix(uColorStart, uColorEnd, strength);\n//     gl_FragColor = vec4(color, 1.0);\n//     #include <tonemapping_fragment>\n//     #include <encodings_fragment>\n//   }`,\n// )\n\n// // shaderMaterial creates a THREE.ShaderMaterial, and auto-creates uniform setter/getters\n// // extend makes it available in JSX, in this case <portalMaterial />\n// extend({ PortalMaterial })\n_s(Model, \"o7E3IC9nNLQLfCbJbaqzt8lcL3w=\", false, function () {\n  return [useFrame];\n});\n_c = Model;\nvar _c;\n$RefreshReg$(_c, \"Model\");","map":{"version":3,"names":["useRef","Color","AdditiveBlending","Canvas","extend","useFrame","OrbitControls","Sparkles","shaderMaterial","useGLTF","useTexture","jsxDEV","_jsxDEV","Model","props","_s","portalMaterial","state","delta","current","uTime","position","children","attach","args","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/niles/Desktop/Github/cmaj/firstProj/gui/src/3D/Sphere.js"],"sourcesContent":["import { useRef } from 'react'\nimport { Color, AdditiveBlending } from 'three'\nimport { Canvas, extend, useFrame } from '@react-three/fiber'\nimport { OrbitControls, Sparkles, shaderMaterial, useGLTF, useTexture } from '@react-three/drei'\nimport glsl from 'babel-plugin-glsl/macro'\n\nexport default function Model(props) {\n  const portalMaterial = useRef()\n  useFrame((state, delta) => (portalMaterial.current.uTime += delta))\n  return (\n    // <group {...props} dispose={null}>\n    //   <mesh geometry={nodes.portalCircle.geometry} position={[0, 0.78, 1.6]} rotation={[-Math.PI / 2, 0, 0]}>\n    //     <portalMaterial ref={portalMaterial} blending={AdditiveBlending} uColorStart=\"hotpink\" uColorEnd=\"white\" />\n    //   </mesh>\n    //   <mesh geometry={nodes.lampLightL.geometry} material-color=\"#f0bf94\" position={[0.89, 1.07, -0.14]} scale={[0.07, 0.11, 0.07]} />\n    //   <mesh geometry={nodes.lampLightR.geometry} material-color=\"#f0bf94\" position={[-0.98, 1.07, -0.14]} scale={[-0.07, 0.11, 0.07]} />\n    //   <mesh geometry={nodes.baked.geometry} position={[0.9, 0.34, -1.47]} rotation={[0, 0.14, 0]}>\n    //     <meshBasicMaterial map={bakedTexture} map-flipY={false} />\n    //   </mesh>\n    // </group>\n    <mesh \n    position={[0,0,0]}\n    >\n      <sphereGeometry attach=\"geometry\" args={[1.8, 128, 128]} />\n      {/* <portalMaterial ref={portalMaterial} blending={AdditiveBlending} uColorStart=\"hotpink\" uColorEnd=\"white\" /> */}\n      {/* <meshPhysicalMaterial \n        attach=\"material\"\n        color={props.loaded?\"#444444\":\"#999999\"}\n        metalness={0.0}\n        roughness={0.3}\n        castShadow\n        // flatShading={true}\n      /> */}\n    </mesh>\n  )\n}\n\n// const PortalMaterial = shaderMaterial(\n//   { uTime: 0, uColorStart: new Color('hotpink'), uColorEnd: new Color('white') },\n//   glsl`\n//   varying vec2 vUv;\n//   void main() {\n//     vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n//     vec4 viewPosition = viewMatrix * modelPosition;\n//     vec4 projectionPosition = projectionMatrix * viewPosition;\n//     gl_Position = projectionPosition;\n//     vUv = uv;\n//   }`,\n//   glsl`\n//   #pragma glslify: cnoise3 = require(glsl-noise/classic/3d.glsl) \n//   uniform float uTime;\n//   uniform vec3 uColorStart;\n//   uniform vec3 uColorEnd;\n//   varying vec2 vUv;\n//   void main() {\n//     vec2 displacedUv = vUv + cnoise3(vec3(vUv * 7.0, uTime * 0.1));\n//     float strength = cnoise3(vec3(displacedUv * 5.0, uTime * 0.2));\n//     float outerGlow = distance(vUv, vec2(0.5)) * 4.0 - 1.4;\n//     strength += outerGlow;\n//     strength += step(-0.2, strength) * 0.8;\n//     strength = clamp(strength, 0.0, 1.0);\n//     vec3 color = mix(uColorStart, uColorEnd, strength);\n//     gl_FragColor = vec4(color, 1.0);\n//     #include <tonemapping_fragment>\n//     #include <encodings_fragment>\n//   }`,\n// )\n\n// // shaderMaterial creates a THREE.ShaderMaterial, and auto-creates uniform setter/getters\n// // extend makes it available in JSX, in this case <portalMaterial />\n// extend({ PortalMaterial })\n"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,KAAK,EAAEC,gBAAgB,QAAQ,OAAO;AAC/C,SAASC,MAAM,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,oBAAoB;AAC7D,SAASC,aAAa,EAAEC,QAAQ,EAAEC,cAAc,EAAEC,OAAO,EAAEC,UAAU,QAAQ,mBAAmB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGhG,eAAe,SAASC,KAAKA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACnC,MAAMC,cAAc,GAAGhB,MAAM,CAAC,CAAC;EAC/BK,QAAQ,CAAC,CAACY,KAAK,EAAEC,KAAK,KAAMF,cAAc,CAACG,OAAO,CAACC,KAAK,IAAIF,KAAM,CAAC;EACnE;IAAA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAN,OAAA;MACAS,QAAQ,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAE;MAAAC,QAAA,eAEhBV,OAAA;QAAgBW,MAAM,EAAC,UAAU;QAACC,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAUvD;EAAC;AAEX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAAb,EAAA,CAhEwBF,KAAK;EAAA,QAE3BR,QAAQ;AAAA;AAAAwB,EAAA,GAFchB,KAAK;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}