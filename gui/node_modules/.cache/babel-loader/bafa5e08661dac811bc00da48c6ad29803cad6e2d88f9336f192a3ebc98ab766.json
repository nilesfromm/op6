{"ast":null,"code":"var _jsxFileName = \"/Users/niles/Desktop/Github/cmaj/firstProj/gui/src/3D/Sphere.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useCallback, useEffect } from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport Three from './ThreeJS';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Model(props) {\n  _s();\n  // const oscFrqs = useRef(props.frqs);\n  // const oscAmps = useRef(props.amps);\n\n  const g_uniforms = {\n    u_time: {\n      value: 0.0\n    },\n    u_scale: {\n      value: 2.0\n    },\n    x_freq: {\n      value: 0.0\n    },\n    y_freq: {\n      value: 0.0\n    },\n    z_freq: {\n      value: 0.0\n    },\n    w_freq: {\n      value: 0.0\n    },\n    x_amp: {\n      value: 0.0\n    },\n    y_amp: {\n      value: 0.0\n    },\n    z_amp: {\n      value: 0.0\n    },\n    w_amp: {\n      value: 0.0\n    }\n  };\n  console.log(\"Sphere loaded:\", props.loaded);\n  const onBeforeCompile = shader => {\n    shader.uniforms = {\n      ...shader.uniforms,\n      ...g_uniforms\n    };\n    console.log(\"OBC loaded:\", props.loaded);\n    shader.vertexShader = ['float pi = 3.14159265358979323846;', 'vec3 orthogonal(vec3 v) {', '\\treturn normalize(abs(v.x) > abs(v.z) ? vec3(-v.y, v.x, 0.0): vec3(0.0, -v.z, v.y));', '}', 'float texelSize = 1.0 / 128.0;', 'varying vec3 vpos;', 'varying float intensity;', 'varying vec3 fNormal;', 'uniform float u_time, u_scale;', 'uniform float x_freq, y_freq, z_freq, w_freq;', 'uniform float x_amp, y_amp, z_amp, w_amp;', 'uniform mat4 view_matrix;', 'uniform mat4 model_matrix;', 'vec3 displace(vec3 point) {',\n    // '\\treturn vec3(point.x,point.y,point.z);',\n    '\\treturn vec3(0., (x_amp * sin(-u_time + u_scale * x_freq*( point.z/(2.*pi))))+(y_amp * sin(u_time + u_scale * y_freq*( point.x/(2.*pi)))), (z_amp * sin(u_time + u_scale * z_freq*( point.y/(2.*pi))))+(w_amp * sin(u_time + u_scale * w_freq*( point.x/(2.*pi)))));', '}', 'uniform float p;\\n'].join('\\n') + shader.vertexShader;\n    shader.vertexShader = shader.vertexShader.replace('#include <begin_vertex>', ['\\tvpos = position;',\n    // '\\tvec3 transformed = position;',\n    '\\tvec3 displacedPosition = position + displace(position);', '\\tfloat offset = 0.0140625;',\n    // '\\tfloat y = (x_amp * sin(-u_time + u_scale * x_freq*( position.z/(2.*pi))))+(y_amp * sin(u_time + u_scale * y_freq*( position.x/(2.*pi))));',\n    // '\\tfloat z = (z_amp * sin(u_time + u_scale * z_freq*( position.y/(2.*pi))))+(w_amp * sin(u_time + u_scale * w_freq*( position.x/(2.*pi))));',\n\n    // '\\ttransformed.y += y;',\n    // '\\ttransformed.z += z;',\n    // '\\ttransformed = position + displace(transformed);',\n    '\\tvec3 tangent = orthogonal(normal);', '\\tvec3 bitangent = normalize(cross(normal, tangent));', '\\tvec3 neighbour1 = position + tangent * offset;',\n    //transformed was position???\n    '\\tvec3 neighbour2 = position + bitangent * offset;', '\\tvec3 displacedNeighbour1 = neighbour1 + displace(neighbour1);', '\\tvec3 displacedNeighbour2 = neighbour2 + displace(neighbour2);', '\\tvec3 displacedTangent = displacedNeighbour1 - displacedPosition;', '\\tvec3 displacedBitangent = displacedNeighbour2 - displacedPosition;', '\\tvec3 displacedNormal = normalize(cross(displacedTangent, displacedBitangent));',\n    // '\\tvNormal = ( normalMatrix * normal );',\n    'fNormal = normalize(normalMatrix * displacedNormal);', 'vec3 transformed = displacedPosition;', 'vNormal = normalize(normalMatrix * displacedNormal);', '\\tintensity = pow(1.0 - abs(dot(normalize(normalMatrix * displacedNormal), vec3(0, 0, 1))), 1.);' //normalize(normalMatrix * displacedNormal)\n    ].join('\\n'));\n    shader.vertexShader = shader.vertexShader.replace('vec3 transformedNormal = objectNormal;', 'vec3 transformedNormal = displacedNormal;');\n    // console.log(shader.vertexShader);\n\n    shader.fragmentShader = ['varying vec3 vpos;', 'varying float intensity;', 'varying vec3 fNormal;', 'vec3 cosPalette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {', '\\treturn a + b * cos(6.28318 * (c * t + d));', '}', 'uniform vec3 glowColor;\\n'].join('\\n') + shader.fragmentShader;\n    shader.fragmentShader = shader.fragmentShader.replace(`vec4 diffuseColor = vec4( diffuse, opacity );`,\n    // `vec4 diffuseColor = vec4( fNormal, opacity );`,\n    `\\nvec3 brightness = vec3(0.5, 0.5, 0.5);\n      \\nvec3 contrast = vec3(0.5, 0.5, 0.5);\n      \\nvec3 oscilation = vec3(1.0, 1.0, 1.0);\n      \\nvec3 phase = vec3(0.2, 0.1, 0.0);\n      \\nvec3 color = cosPalette(intensity, brightness, contrast, oscilation, phase);\n      \\nvec3 glow = vec3(0.25,1.0,1.0) * intensity;\n      \\n vec4 diffuseColor = vec4(color, 1.0);`\n    // `vec4 diffuseColor = vec4(abs(vpos.x), abs(vpos.y), abs(vpos.z), 1.0);` //0.0125, 0.+vUv.y/20., 0.+vUv.y/10., 1.0\n    );\n  };\n  const mat = useRef();\n  const oBC = useCallback(onBeforeCompile);\n  // console.log(mat);\n  useFrame((state, delta) => {\n    g_uniforms.u_time.value -= delta;\n    console.log(props.frqs[1]);\n    // g_uniforms.x_freq.value = 10;\n    // g_uniforms.x_amp.value = 0.3+(1/200);\n    // g_uniforms.y_freq.value = oscVals.current[0].freq/50;\n    // g_uniforms.y_amp.value = 0.3+(oscVals.current[0].amp/200);\n    // g_uniforms.z_freq.value = oscVals.current[2].freq/50;\n    // g_uniforms.z_amp.value = 0.3+(oscVals.current[2].amp/200);\n    // g_uniforms.w_freq.value = oscVals.current[3].freq/50;\n    // g_uniforms.w_amp.value = 0.3+(oscVals.current[3].amp/200);\n    // console.log(g_uniforms.y_amp.value);\n  });\n  // console.log(mat.current.material);\n\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    castShadow: true,\n    receiveShadow: true,\n    ref: mat,\n    position: [0, 0, 0],\n    children: [/*#__PURE__*/_jsxDEV(\"sphereGeometry\", {\n      attach: \"geometry\",\n      args: [1.8, 128, 128]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshPhysicalMaterial\", {\n      attach: \"material\",\n      color: props.loaded ? \"#444444\" : \"#999999\",\n      metalness: 0.0,\n      roughness: 0.3,\n      castShadow: true\n      // flatShading={true}\n      ,\n      onBeforeCompile: oBC\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n\n// useGLTF.preload('/sphere.gltf')\n_s(Model, \"hTSnU3u5tJ6ZPbvGX6p4IJ+ADR8=\", false, function () {\n  return [useFrame];\n});\n_c = Model;\nvar _c;\n$RefreshReg$(_c, \"Model\");","map":{"version":3,"names":["React","useRef","useCallback","useEffect","useFrame","Three","jsxDEV","_jsxDEV","Model","props","_s","g_uniforms","u_time","value","u_scale","x_freq","y_freq","z_freq","w_freq","x_amp","y_amp","z_amp","w_amp","console","log","loaded","onBeforeCompile","shader","uniforms","vertexShader","join","replace","fragmentShader","mat","oBC","state","delta","frqs","castShadow","receiveShadow","ref","position","children","attach","args","fileName","_jsxFileName","lineNumber","columnNumber","color","metalness","roughness","_c","$RefreshReg$"],"sources":["/Users/niles/Desktop/Github/cmaj/firstProj/gui/src/3D/Sphere.js"],"sourcesContent":["import React, { useRef,useCallback, useEffect } from 'react'\nimport { useFrame } from '@react-three/fiber'\nimport Three from './ThreeJS'\n\nexport default function Model(props) {\n  // const oscFrqs = useRef(props.frqs);\n  // const oscAmps = useRef(props.amps);\n\n  const g_uniforms = {\n    u_time: {value: 0.0},\n    u_scale: {value: 2.0},\n    x_freq: {value: 0.0},\n    y_freq: {value: 0.0},\n    z_freq: {value: 0.0},\n    w_freq: {value: 0.0},\n    x_amp: {value: 0.0},\n    y_amp: {value: 0.0},\n    z_amp: {value: 0.0},\n    w_amp: {value: 0.0},\n  }\n\n  console.log(\"Sphere loaded:\", props.loaded);\n  const onBeforeCompile = shader => {\n    shader.uniforms = {\n      ...shader.uniforms,\n      ...g_uniforms,\n    };\n\n    console.log(\"OBC loaded:\", props.loaded);\n\n    shader.vertexShader = [\n      'float pi = 3.14159265358979323846;',\n      'vec3 orthogonal(vec3 v) {',\n      '\\treturn normalize(abs(v.x) > abs(v.z) ? vec3(-v.y, v.x, 0.0): vec3(0.0, -v.z, v.y));',\n      '}',\n      'float texelSize = 1.0 / 128.0;',\n      'varying vec3 vpos;',\n      'varying float intensity;',\n      'varying vec3 fNormal;',\n      'uniform float u_time, u_scale;',\n      'uniform float x_freq, y_freq, z_freq, w_freq;', \n      'uniform float x_amp, y_amp, z_amp, w_amp;',\n      'uniform mat4 view_matrix;',\n      'uniform mat4 model_matrix;',\n      'vec3 displace(vec3 point) {',\n      // '\\treturn vec3(point.x,point.y,point.z);',\n      '\\treturn vec3(0., (x_amp * sin(-u_time + u_scale * x_freq*( point.z/(2.*pi))))+(y_amp * sin(u_time + u_scale * y_freq*( point.x/(2.*pi)))), (z_amp * sin(u_time + u_scale * z_freq*( point.y/(2.*pi))))+(w_amp * sin(u_time + u_scale * w_freq*( point.x/(2.*pi)))));',\n      '}',\n      'uniform float p;\\n',\n    ].join('\\n') + shader.vertexShader;\n\n    shader.vertexShader = shader.vertexShader.replace(\n      '#include <begin_vertex>',\n      [   \n        '\\tvpos = position;',\n        // '\\tvec3 transformed = position;',\n        '\\tvec3 displacedPosition = position + displace(position);',\n        '\\tfloat offset = 0.0140625;',\n\n        // '\\tfloat y = (x_amp * sin(-u_time + u_scale * x_freq*( position.z/(2.*pi))))+(y_amp * sin(u_time + u_scale * y_freq*( position.x/(2.*pi))));',\n        // '\\tfloat z = (z_amp * sin(u_time + u_scale * z_freq*( position.y/(2.*pi))))+(w_amp * sin(u_time + u_scale * w_freq*( position.x/(2.*pi))));',\n\n        // '\\ttransformed.y += y;',\n        // '\\ttransformed.z += z;',\n        // '\\ttransformed = position + displace(transformed);',\n        '\\tvec3 tangent = orthogonal(normal);',\n        '\\tvec3 bitangent = normalize(cross(normal, tangent));',\n        '\\tvec3 neighbour1 = position + tangent * offset;', //transformed was position???\n        '\\tvec3 neighbour2 = position + bitangent * offset;',\n        '\\tvec3 displacedNeighbour1 = neighbour1 + displace(neighbour1);',\n        '\\tvec3 displacedNeighbour2 = neighbour2 + displace(neighbour2);',\n\n        '\\tvec3 displacedTangent = displacedNeighbour1 - displacedPosition;',\n        '\\tvec3 displacedBitangent = displacedNeighbour2 - displacedPosition;',\n\n        '\\tvec3 displacedNormal = normalize(cross(displacedTangent, displacedBitangent));',\n\n        // '\\tvNormal = ( normalMatrix * normal );',\n        'fNormal = normalize(normalMatrix * displacedNormal);',\n        'vec3 transformed = displacedPosition;',\n        'vNormal = normalize(normalMatrix * displacedNormal);',\n        '\\tintensity = pow(1.0 - abs(dot(normalize(normalMatrix * displacedNormal), vec3(0, 0, 1))), 1.);', //normalize(normalMatrix * displacedNormal)\n      ].join('\\n')\n    );\n\n    shader.vertexShader = shader.vertexShader.replace(\n      'vec3 transformedNormal = objectNormal;',\n      'vec3 transformedNormal = displacedNormal;'\n    );\n    // console.log(shader.vertexShader);\n\n    shader.fragmentShader = [\n      'varying vec3 vpos;',\n      'varying float intensity;',\n      'varying vec3 fNormal;',\n      'vec3 cosPalette(float t, vec3 a, vec3 b, vec3 c, vec3 d) {',\n      '\\treturn a + b * cos(6.28318 * (c * t + d));',\n      '}',\n      'uniform vec3 glowColor;\\n'\n    ].join('\\n') + shader.fragmentShader;\n\n    shader.fragmentShader = shader.fragmentShader.replace(\n      `vec4 diffuseColor = vec4( diffuse, opacity );`, \n      // `vec4 diffuseColor = vec4( fNormal, opacity );`,\n      `\\nvec3 brightness = vec3(0.5, 0.5, 0.5);\n      \\nvec3 contrast = vec3(0.5, 0.5, 0.5);\n      \\nvec3 oscilation = vec3(1.0, 1.0, 1.0);\n      \\nvec3 phase = vec3(0.2, 0.1, 0.0);\n      \\nvec3 color = cosPalette(intensity, brightness, contrast, oscilation, phase);\n      \\nvec3 glow = vec3(0.25,1.0,1.0) * intensity;\n      \\n vec4 diffuseColor = vec4(color, 1.0);`\n      // `vec4 diffuseColor = vec4(abs(vpos.x), abs(vpos.y), abs(vpos.z), 1.0);` //0.0125, 0.+vUv.y/20., 0.+vUv.y/10., 1.0\n    );\n  };\n\n  const mat = useRef()\n  const oBC = useCallback(onBeforeCompile);\n  // console.log(mat);\n  useFrame((state, delta) => {\n    g_uniforms.u_time.value -= delta;\n    console.log(props.frqs[1]);\n    // g_uniforms.x_freq.value = 10;\n    // g_uniforms.x_amp.value = 0.3+(1/200);\n    // g_uniforms.y_freq.value = oscVals.current[0].freq/50;\n    // g_uniforms.y_amp.value = 0.3+(oscVals.current[0].amp/200);\n    // g_uniforms.z_freq.value = oscVals.current[2].freq/50;\n    // g_uniforms.z_amp.value = 0.3+(oscVals.current[2].amp/200);\n    // g_uniforms.w_freq.value = oscVals.current[3].freq/50;\n    // g_uniforms.w_amp.value = 0.3+(oscVals.current[3].amp/200);\n    // console.log(g_uniforms.y_amp.value);\n  })\n  // console.log(mat.current.material);\n      \n  return (\n    <mesh \n      castShadow\n      receiveShadow\n      ref={mat}\n      position={[0,0,0]}\n    >\n      <sphereGeometry attach=\"geometry\" args={[1.8, 128, 128]} />\n      <meshPhysicalMaterial \n        attach=\"material\"\n        color={props.loaded?\"#444444\":\"#999999\"}\n        metalness={0.0}\n        roughness={0.3}\n        castShadow\n        // flatShading={true}\n        onBeforeCompile={oBC}\n      />\n    </mesh>\n  )\n}\n\n// useGLTF.preload('/sphere.gltf')\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}