{"ast":null,"code":"import{useEffect,useState,useRef}from\"react\";import{nanoid}from\"nanoid\";import OutputNode from\"./outputNode\";import InputNode from\"./inputNode\";import PatchCable from\"./patchCable\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Patchbay=_ref=>{let{handleChange}=_ref;const svgRef=useRef(null);const[patchCables,setPatchCables]=useState([]);const[connections,setConnections]=useState([0,0,0,0,0,0]);const outs=6;const ins=6;const updateConnections=(outId,inId,state)=>{console.log(\"updating connections\");console.log(outId+\" -> \"+inId+\" : \"+state);setConnections(prevConnections=>{const newConnections=[...prevConnections];if(state){newConnections[outId]=newConnections[outId]|1<<inId;}else{newConnections[outId]=newConnections[outId]&~(1<<inId);}handleChange(\"con\",outId,newConnections[outId]);// console.log(newConnections[outId]);\nreturn newConnections;});//set nth bit of connections[outId] based on bit\n// setConnections((prevConnections) => [\n//   ...prevConnections,\n//   (prevConnections[outId] = prevConnections[outId] ^ bit),\n// ]);\n// setConnections((prevConnections) => {\n//   prevConnections[outId] = prevConnections[outId] ^ bit;\n//   return prevConnections;\n// });\n// console.log(connections);\n};const createPatchCable=(outId,startPt)=>{setPatchCables(prevCables=>[...prevCables,{id:nanoid(),outId,startPt}]);// console.log(patchCables);\n};const removePatchCable=id=>{//remove patch cable at id\nsetPatchCables(prevCables=>prevCables.filter(cable=>cable.id!==id));// console.log(patchCables.filter((cable, i) => i !== id));\n// setPatchCables((prevCables) => prevCables.filter((cable, i) => i !== id));\n// console.log(patchCables);\n};// useEffect(() => {\n//   console.log(\"updated connections:\");\n//   console.log(connections);\n// }, [connections]);\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"h-[240px] w-[500px] bg-gray-200\",children:/*#__PURE__*/_jsxs(\"svg\",{viewBox:\"0 0 500 240\",children:[patchCables.map(cable=>/*#__PURE__*/_jsx(PatchCable,{id:cable.id,outId:cable.outId,startPt:cable.startPt,handleRemovePatchCable:removePatchCable,onMouseDown:()=>console.log(\"hovering over cable\"),updateConnections:updateConnections},\"cable-\".concat(cable.id))),[...Array(ins)].map((node,i)=>/*#__PURE__*/_jsx(InputNode,{i:i},\"input-\".concat(i))),[...Array(outs)].map((node,i)=>/*#__PURE__*/_jsx(OutputNode,{i:i,handleCreatePatchCable:createPatchCable},\"output-\".concat(i))),/*#__PURE__*/_jsx(\"g\",{transform:\"translate(-10, -10)\",children:/*#__PURE__*/_jsx(\"path\",{style:{pointerEvents:\"none\",webkitFilter:\"drop-shadow( 0px 0px 16px rgba(10, 10, 10, 0.4))\",filter:\"drop-shadow( 0px 0px 16px rgba(10, 10, 10, 0.4))\",boxShadow:\"0px 0px 16px rgba(10, 10, 10, 0.4)\"},fill:\"rgb(240, 240, 240)\",class:\"cls-1\",d:\"M0,0v260h520V0H0ZM510.01,242h-.01c0,4.42-3.58,8-8,8h-59.43c0-2.21-1.79-4-4-4s-4,1.79-4,4h-63.43c0-2.21-1.79-4-4-4s-4,1.79-4,4h-63.43c0-2.21-1.79-4-4-4s-4,1.79-4,4h-63.43c0-2.21-1.79-4-4-4s-4,1.79-4,4h-63.43c0-2.21-1.79-4-4-4s-4,1.79-4,4h-63.43c0-2.21-1.79-4-4-4s-4,1.79-4,4H18c-4.42,0-8-3.58-8-8V18c0-4.42,3.58-8,8-8h39.43c0,2.21,1.79,4,4,4s4-1.79,4-4h12c0,2.21,1.79,4,4,4s4-1.79,4-4h12c0,2.21,1.79,4,4,4s4-1.79,4-4h23.43c0,2.21,1.79,4,4,4s4-1.79,4-4h12c0,2.21,1.79,4,4,4s4-1.79,4-4h12c0,2.21,1.79,4,4,4s4-1.79,4-4h23.43c0,2.21,1.79,4,4,4s4-1.79,4-4h12c0,2.21,1.79,4,4,4s4-1.79,4-4h12c0,2.21,1.79,4,4,4s4-1.79,4-4h23.43c0,2.21,1.79,4,4,4s4-1.79,4-4h12c0,2.21,1.79,4,4,4s4-1.79,4-4h12c0,2.21,1.79,4,4,4s4-1.79,4-4h23.43c0,2.21,1.79,4,4,4s4-1.79,4-4h12c0,2.21,1.79,4,4,4s4-1.79,4-4h12c0,2.21,1.79,4,4,4s4-1.79,4-4h23.43c0,2.21,1.79,4,4,4s4-1.79,4-4h12c0,2.21,1.79,4,4,4s4-1.79,4-4h12c0,2.21,1.79,4,4,4s4-1.79,4-4h39.43c4.42,0,8,3.58,8,8v224Z\"})})]})});};export default Patchbay;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}