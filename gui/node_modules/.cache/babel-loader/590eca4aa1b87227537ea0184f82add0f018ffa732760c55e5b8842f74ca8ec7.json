{"ast":null,"code":"import { urlAlphabet as scopedUrlAlphabet } from './url-alphabet/index.js';\nexport { urlAlphabet } from './url-alphabet/index.js';\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes));\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;\n  let step = -~(1.6 * mask * defaultSize / alphabet.length);\n  return function () {\n    let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultSize;\n    let id = '';\n    while (true) {\n      let bytes = getRandom(step);\n      let j = step;\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || '';\n        if (id.length === size) return id;\n      }\n    }\n  };\n};\nexport let customAlphabet = function (alphabet) {\n  let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 21;\n  return customRandom(alphabet, size, random);\n};\nexport let nanoid = function () {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 21;\n  let id = '';\n  let bytes = crypto.getRandomValues(new Uint8Array(size));\n  while (size--) {\n    id += scopedUrlAlphabet[bytes[size] & 63];\n  }\n  return id;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}