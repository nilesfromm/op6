{"ast":null,"code":"import * as React from 'react';\nimport { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\nimport { suspend } from 'suspend-react';\nvar _window$document, _window$navigator;\nconst IS_BROWSER = typeof window !== 'undefined' && typeof ((_window$document = window.document) == null ? void 0 : _window$document.createElement) === 'function' && typeof ((_window$navigator = window.navigator) == null ? void 0 : _window$navigator.userAgent) === 'string';\nlet _HLSModule = null;\nasync function getHLS(url, config) {\n  if (IS_BROWSER && url.pathname.endsWith('.m3u8')) {\n    var _HLSModule2;\n    (_HLSModule2 = _HLSModule) !== null && _HLSModule2 !== void 0 ? _HLSModule2 : _HLSModule = await import('hls.js');\n    if (_HLSModule.default.isSupported()) {\n      return new _HLSModule.default({\n        ...config\n      });\n    }\n  }\n  return null;\n}\nfunction useVideoTexture(src) {\n  let {\n    unsuspend = 'loadedmetadata',\n    start = true,\n    crossOrigin = 'anonymous',\n    muted = true,\n    loop = true,\n    hls = {},\n    ...videoProps\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const url = new URL(typeof src === 'string' ? src : '', window.location.href);\n  const hlsRef = useRef(null);\n  const videoRef = useRef(null);\n  const gl = useThree(state => state.gl);\n  const texture = suspend(() => new Promise(async res => {\n    const video = Object.assign(document.createElement('video'), {\n      src: typeof src === 'string' && src || undefined,\n      srcObject: src instanceof MediaStream && src || undefined,\n      crossOrigin,\n      loop,\n      muted,\n      ...videoProps\n    });\n    videoRef.current = video;\n\n    // hlsjs extension\n    if (typeof src === 'string') {\n      const _hls = hlsRef.current = await getHLS(url, hls);\n      if (_hls) {\n        _hls.attachMedia(video);\n        _hls.on('hlsMediaAttached', () => {\n          _hls.loadSource(src);\n        });\n      } else {\n        video.src = src;\n      }\n    } else if (src instanceof MediaStream) {\n      video.srcObject = src;\n    }\n    const texture = new THREE.VideoTexture(video);\n    if ('colorSpace' in texture) texture.colorSpace = gl.outputColorSpace;else texture.encoding = gl.outputEncoding;\n    video.addEventListener(unsuspend, () => res(texture));\n  }), [src]);\n  useEffect(() => {\n    start && texture.image.play();\n    return () => {\n      if (hlsRef.current) {\n        hlsRef.current.destroy();\n        hlsRef.current = null;\n      }\n    };\n  }, [texture, start]);\n  return texture;\n}\n\n//\n\nconst VideoTexture = _ref => {\n  let {\n    children,\n    src,\n    ...config\n  } = _ref;\n  const ret = useVideoTexture(src, config);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, children == null ? void 0 : children(ret));\n};\nexport { VideoTexture, useVideoTexture };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}